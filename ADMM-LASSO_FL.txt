# Number of replications
num_replications <- 100

# Number of features
p <- 50

# Store all beta for ADMM-LASSO
all_global_beta <- matrix(0, nrow = num_replications, ncol = p)
beta_pool_lasso <- matrix(0, nrow = num_replications, ncol = p)
all_beta_client1 <- matrix(0, nrow = num_replications, ncol = p)
all_beta_client2 <- matrix(0, nrow = num_replications, ncol = p)
# Store thresholded beta for ADMM-LASSO
all_global_beta_thresh <- matrix(0, nrow = num_replications, ncol = p)
all_beta_pool_thresh <- matrix(0, nrow = num_replications, ncol = p)
all_beta_client1_thresh <- matrix(0, nrow = num_replications, ncol = p)
all_beta_client2_thresh <- matrix(0, nrow = num_replications, ncol = p)

# Store metrics for each replication-ADMM-LASSO
TP_list <- numeric(num_replications)
FP_list <- numeric(num_replications)
FN_list <- numeric(num_replications)
TN_list <- numeric(num_replications)
sensitivity <- numeric(num_replications)
specificity <- numeric(num_replications)

# Store metrics for each replication-LASSO-POOL
TP_list_LP <- numeric(num_replications)
FP_list_LP <- numeric(num_replications)
FN_list_LP <- numeric(num_replications)
TN_list_LP <- numeric(num_replications)
sensitivity_LP <- numeric(num_replications)
specificity_LP <- numeric(num_replications)

# Store metrics for each replication LASSO-1
TP_list_L1 <- numeric(num_replications)
FP_list_L1 <- numeric(num_replications)
FN_list_L1 <- numeric(num_replications)
TN_list_L1 <- numeric(num_replications)
sensitivity_L1 <- numeric(num_replications)
specificity_L1 <- numeric(num_replications)

# Store metrics for each replication-LASSO-2
TP_list_L2 <- numeric(num_replications)
FP_list_L2 <- numeric(num_replications)
FN_list_L2 <- numeric(num_replications)
TN_list_L2 <- numeric(num_replications)
sensitivity_L2 <- numeric(num_replications)
specificity_L2 <- numeric(num_replications)

# Calculate MSE and MAE for coefficient estimation
MSE_ADMM_LASSO <- numeric(num_replications)
MSE_LASSO_POOL <- numeric(num_replications)
MSE_LASSO_1 <- numeric(num_replications)
MSE_LASSO_2 <- numeric(num_replications)

MAE_ADMM_LASSO <- numeric(num_replications)
MAE_LASSO_POOL <- numeric(num_replications)
MAE_LASSO_1 <- numeric(num_replications)
MAE_LASSO_2 <- numeric(num_replications)

# Calculate MSE for predictions
MSE_PRED_ADMM_LASSO <- numeric(num_replications)
MSE_PRED_LASSO_POOL <- numeric(num_replications)
MSE_PRED_LASSO_1 <- numeric(num_replications)
MSE_PRED_LASSO_2 <- numeric(num_replications)

# Calculate MSE for predictions with thresholded betas
MSE_PRED_ADMM_LASSO_THRESH <- numeric(num_replications)
MSE_PRED_LASSO_POOL_THRESH <- numeric(num_replications)
MSE_PRED_LASSO_1_THRESH <- numeric(num_replications)
MSE_PRED_LASSO_2_THRESH <- numeric(num_replications)

# Calculate MSE for coefficient with thresholded betas
MSE_beta_ADMM_LASSO_THRESH <- numeric(num_replications)
MSE_beta_LASSO_POOL_THRESH <- numeric(num_replications)
MSE_beta_LASSO_1_THRESH <- numeric(num_replications)
MSE_beta_LASSO_2_THRESH <- numeric(num_replications)

# Calculate MAE for coefficient with thresholded betas
MAE_beta_ADMM_LASSO_THRESH <- numeric(num_replications)
MAE_beta_LASSO_POOL_THRESH <- numeric(num_replications)
MAE_beta_LASSO_1_THRESH <- numeric(num_replications)
MAE_beta_LASSO_2_THRESH <- numeric(num_replications)


# Define the thresholding function
threshold_coefficients <- function(beta) {
  beta[abs(beta) < 0.005] <- 0
  return(beta)
}

# Replications Loop
for (i in 1:num_replications) {
  # Set a new seed for each replication
  set.seed(100 + i)
  
  # Simulate data for two clients
  n <- 100  # Number of samples per client
  m <- 2   # Number of clients
  
  # True beta values
  true_beta <- c(5, -2, 3,1.5, 7, rep(0,p-5))
  
  # Function to simulate data for each client
  simulate_data <- function(client_id) {
    if (client_id == 1) {
      # Client 1: Normal distribution with mean 3 and variance 4
      X <- matrix(rnorm(n * p, mean = 3, sd = 2), ncol = p)
    } else {
      # Client 2: Normal distribution with mean 4 and variance 1
      X <- matrix(rnorm(n * p, mean = 4, sd = 1), ncol = p)
    }
    y <- X %*% true_beta + rnorm(n)
    return(list(X = X, y = y, client_id = client_id))
  }
  
  # Simulate data for each client
  clients <- lapply(1:m, simulate_data)
  
  # Function to perform soft-thresholding
  soft_threshold <- function(x, lambda) {
    sign_x <- sign(x)
    max_0_x_lambda <- pmax(0, abs(x) - lambda)
    return(sign_x * max_0_x_lambda)
  }
  
  # Function to perform local optimization using ADMM Lasso estimates
  admm_local_lasso <- function(X, y, rho, lambda, max_iter = 1000, tol = 1e-8) {
    # Initialize variables
    beta <- rep(0, p)
    z <- rep(0, p)
    u <- rep(0, p)
    
    # ADMM iterations
    for (iter in 1:max_iter) {
      # Beta-update using the lasso estimate
      beta <- solve(t(X) %*% X + (1 / rho) * diag(p)) %*% (t(X) %*% y + (1 / rho) * (z - u))
      
      # Z-update
      z <- soft_threshold(beta + u, lambda / rho)
      
      # U-update
      u <- u + beta - z
      
      # Check convergence
      if (sum(abs(beta - z)) < tol) {
        break
      }
    }
    return(list(beta = beta, z = z))
  }
  
  # Function to aggregate local updates using ADMM
  admm_aggregate <- function(client_updates) {
    beta_combined <- Reduce(`+`, lapply(client_updates, `[[`, "beta")) / length(client_updates)
    z_combined <- Reduce(`+`, lapply(client_updates, `[[`, "z")) / length(client_updates)
    return(list(beta_combined = beta_combined, z_combined = z_combined))
  }
  
  # Federated learning with ADMM-Lasso (L1 regularization)
  # Penalty parameter
  rho <- 0.1
  
  # Lasso regularization parameter
  lambda <- 1
  
  # Number of ADMM iterations
  num_iterations <- 1000
  
  # Initialize global variables
  global_beta <- rep(0, p)
  global_z <- rep(0, p)
  global_u <- rep(0, p)
  
  # Federated learning loop from local update to global model  
  for (iter in 1:num_iterations) {
    # Store previous global parameters for convergence checking
    prev_global_beta <- global_beta
    # Local updates on each client
    client_updates <- lapply(clients, function(client) {
      admm_local_lasso(client$X, client$y, rho, lambda)
    })
    # Aggregate local updates    
    global_update <- admm_aggregate(client_updates)
    # Update global variables  
    global_beta <- global_update$beta_combined
    global_z <- global_update$z_combined
    global_u <- global_u + global_beta - global_z
    # Check convergence   
    if (sum(abs(prev_global_beta - global_beta)) < 1e-8) {
      break
    }
  }
  
  all_global_beta[i, ] <- global_beta
  
  # Initialize counts for TP, FP, FN, TN
  TP <- 0
  FP <- 0
  FN <- 0
  TN <- 0
  
  # Set threshold
  threshold <- 0.01
  
  # Loop through each beta coefficient to calculate TP, FP, FN, TN
  for (j in 1:length(true_beta)) {
    if (abs(true_beta[j]) > threshold) {  # True non-zero beta
      if (abs(global_beta[j]) > threshold) {
        TP <- TP + 1  # True non-zero estimated as non-zero
      } else {
        FN <- FN + 1  # True non-zero estimated as zero
      }
    } else {  # True zero beta
      if (abs(global_beta[j]) > threshold) {
        FP <- FP + 1  # True zero estimated as non-zero
      } else {
        TN <- TN + 1  # True zero estimated as zero
      }
    }
  }
  
  # Store the counts
  TP_list[i] <- TP
  FP_list[i] <- FP
  FN_list[i] <- FN
  TN_list[i] <- TN
  
  # Calculate Sensitivity (SE)
  SE <- TP / (TP + FN)
  sensitivity[i] <- SE
  
  # Calculate Specificity (SP)
  SP <- TN / (TN + FP)
  specificity[i] <- SP
  
  ####### MSE and MAE for ADMM-LASSO for coefficient estimation ##########
  MSE_ADMM_LASSO[i] <- mean((all_global_beta[i, ] - true_beta)^2)
  MAE_ADMM_LASSO[i] <- mean(abs(all_global_beta[i, ] - true_beta))
  
  ####### MSE for ADMM-LASSO predictions ##########
  pred_client1 <- clients[[1]]$X %*% global_beta
  pred_client2 <- clients[[2]]$X %*% global_beta
  true_y_client1 <- clients[[1]]$y
  true_y_client2 <- clients[[2]]$y
  MSE_PRED_ADMM_LASSO[i] <- (mean((pred_client1 - true_y_client1)^2) + mean((pred_client2 - true_y_client2)^2)) / m
  
  ####### MSE for ADMM-LASSO predictions with thresholded betas ##########
  global_beta_thresh <- threshold_coefficients(global_beta)
  all_global_beta_thresh[i, ] <- global_beta_thresh  # Store the thresholded betas
  pred_client1_thresh <- clients[[1]]$X %*% global_beta_thresh
  pred_client2_thresh <- clients[[2]]$X %*% global_beta_thresh
  MSE_PRED_ADMM_LASSO_THRESH[i] <- (mean((pred_client1_thresh - true_y_client1)^2) + mean((pred_client2_thresh - true_y_client2)^2)) / m
  
  ####### MSE and MAE for ADMM-LASSO for coefficient estimation ##########
  MSE_beta_ADMM_LASSO_THRESH[i] <- mean((all_global_beta_thresh[i, ] - true_beta)^2)
  MAE_beta_ADMM_LASSO_THRESH[i] <- mean(abs(all_global_beta_thresh[i, ] - true_beta))
  
  ############################  LASSO_POOL ################
  pooled_X <- do.call(rbind, lapply(clients, function(client) client$X))
  pooled_y <- pooled_X %*% true_beta + rnorm(n)
  
  # Fitting lasso for pool data 
  fit <- cv.glmnet(pooled_X, pooled_y, alpha = 1)
  beta_pool <- as.vector(coef(fit, s = "lambda.1se"))[-1]
  beta_pool_lasso[i, ] <- beta_pool
  
  # Initialize counts for TP, FP, FN, TN
  TP_LP <- 0
  FP_LP <- 0
  FN_LP <- 0
  TN_LP <- 0
  
  # Loop through each beta coefficient to calculate TP, FP, FN, TN
  for (j in 1:length(true_beta)) {
    if (abs(true_beta[j]) > threshold) {  # True non-zero beta
      if (abs(beta_pool[j]) > threshold) {
        TP_LP <- TP_LP + 1  # True non-zero estimated as non-zero
      } else {
        FN_LP <- FN_LP + 1  # True non-zero estimated as zero
      }
    } else {  # True zero beta
      if (abs(beta_pool[j]) > threshold) {
        FP_LP <- FP_LP + 1  # True zero estimated as non-zero
      } else {
        TN_LP <- TN_LP + 1  # True zero estimated as zero
      }
    }
  }
  
  # Store the counts
  TP_list_LP[i] <- TP_LP
  FP_list_LP[i] <- FP_LP
  FN_list_LP[i] <- FN_LP
  TN_list_LP[i] <- TN_LP
  
  # Calculate Sensitivity (SE)
  SE_LP <- TP_LP / (TP_LP + FN_LP)
  sensitivity_LP[i] <- SE_LP
  
  # Calculate Specificity (SP)
  SP_LP <- TN_LP / (TN_LP + FP_LP)
  specificity_LP[i] <- SP_LP
  
  ####### MSE and MAE for LASSO-POOl coefficient estimation ##########
  MSE_LASSO_POOL[i] <- mean((beta_pool_lasso[i, ] - true_beta)^2)
  MAE_LASSO_POOL[i] <- mean(abs(beta_pool_lasso[i, ] - true_beta))
  
  ####### MSE for LASSO-POOL predictions ##########
  pred_pooled <- pooled_X %*% beta_pool
  MSE_PRED_LASSO_POOL[i] <- mean((pred_pooled - pooled_y)^2)
  
  ####### MSE for LASSO-POOL predictions with thresholded betas ##########
  beta_pool_thresh <- threshold_coefficients(beta_pool)
  all_beta_pool_thresh[i, ] <- beta_pool_thresh  # Store the thresholded betas
  pred_pooled_thresh <- pooled_X %*% beta_pool_thresh
  MSE_PRED_LASSO_POOL_THRESH[i] <- mean((pred_pooled_thresh - pooled_y)^2)
  
  ####### MSE and MAE for LASSO-POOl coefficient estimation with thresholded betas ##########
  MSE_beta_LASSO_POOL_THRESH[i] <- mean((all_beta_pool_thresh[i, ] - true_beta)^2)
  MAE_beta_LASSO_POOL_THRESH[i] <- mean(abs(all_beta_pool_thresh[i, ] - true_beta))
  
  
  ############################ LASSO for Client 1 ###################
  
  lasso_model_client1 <- cv.glmnet(clients[[1]]$X, clients[[1]]$y, alpha = 1)
  beta_client1 <- as.vector(coef(lasso_model_client1, s = "lambda.1se"))[-1]
  all_beta_client1[i, ] <- beta_client1
  
  # Initialize counts for TP, FP, FN, TN
  TP_L1 <- 0
  FP_L1 <- 0
  FN_L1 <- 0
  TN_L1 <- 0
  # Loop through each beta coefficient to calculate TP, FP, FN, TN
  for (j in 1:length(true_beta)) {
    if (abs(true_beta[j]) > threshold) {  # True non-zero beta
      if (abs(beta_client1[j]) > threshold) {
        TP_L1 <- TP_L1 + 1  # True non-zero estimated as non-zero
      } else {
        FN_L1 <- FN_L1 + 1  # True non-zero estimated as zero
      }
    } else {  # True zero beta
      if (abs(beta_client1[j]) > threshold) {
        FP_L1 <- FP_L1 + 1  # True zero estimated as non-zero
      } else {
        TN_L1 <- TN_L1 + 1  # True zero estimated as zero
      }
    }
  }
  
  # Store the counts
  TP_list_L1[i] <- TP_L1
  FP_list_L1[i] <- FP_L1
  FN_list_L1[i] <- FN_L1
  TN_list_L1[i] <- TN_L1
  
  # Calculate Sensitivity (SE)
  SE_L1 <- TP_L1 / (TP_L1 + FN_L1)
  sensitivity_L1[i] <- SE_L1
  
  # Calculate Specificity (SP)
  SP_L1 <- TN_L1 / (TN_L1 + FP_L1)
  specificity_L1[i] <- SP_L1
  
  ####### MSE and MAE for LASSO-1 coefficient estimation ##########
  MSE_LASSO_1[i] <- mean((all_beta_client1[i, ] - true_beta)^2)
  MAE_LASSO_1[i] <- mean(abs(all_beta_client1[i, ] - true_beta))
  
  ####### MSE for LASSO-1 predictions ##########
  pred_client1_1 <- clients[[1]]$X %*% beta_client1
  MSE_PRED_LASSO_1[i] <- mean((pred_client1_1 - clients[[1]]$y)^2)
  
  ####### MSE for LASSO-1 predictions with thresholded betas ##########
  beta_client1_thresh <- threshold_coefficients(beta_client1)
  all_beta_client1_thresh[i, ] <- beta_client1_thresh  # Store the thresholded betas
  pred_client1_1_thresh <- clients[[1]]$X %*% beta_client1_thresh
  MSE_PRED_LASSO_1_THRESH[i] <- mean((pred_client1_1_thresh - clients[[1]]$y)^2)
  
  ####### MSE and MAE for LASSO-1 coefficient estimation with thresholded betas ##########
  MSE_beta_LASSO_1_THRESH[i] <- mean((all_beta_client1_thresh[i, ] - true_beta)^2)
  MAE_beta_LASSO_1_THRESH[i] <- mean(abs(all_beta_client1_thresh[i, ] - true_beta))
  
  
  ############################ LASSO for Client 2 ################
  
  lasso_model_client2 <- cv.glmnet(clients[[2]]$X, clients[[2]]$y, alpha = 1)
  beta_client2 <- as.vector(coef(lasso_model_client2, s = "lambda.1se"))[-1]
  all_beta_client2[i, ] <- beta_client2
  
  # Initialize counts for TP, FP, FN, TN
  TP_L2 <- 0
  FP_L2 <- 0
  FN_L2 <- 0
  TN_L2 <- 0
  # Loop through each beta coefficient to calculate TP, FP, FN, TN
  for (j in 1:length(true_beta)) {
    if (abs(true_beta[j]) > threshold) {  # True non-zero beta
      if (abs(beta_client2[j]) > threshold) {
        TP_L2 <- TP_L2 + 1  # True non-zero estimated as non-zero
      } else {
        FN_L2 <- FN_L2 + 1  # True non-zero estimated as zero
      }
    } else {  # True zero beta
      if (abs(beta_client2[j]) > threshold) {
        FP_L2 <- FP_L2 + 1  # True zero estimated as non-zero
      } else {
        TN_L2 <- TN_L2 + 1  # True zero estimated as zero
      }
    }
  }
  
  # Store the counts
  TP_list_L2[i] <- TP_L2
  FP_list_L2[i] <- FP_L2
  FN_list_L2[i] <- FN_L2
  TN_list_L2[i] <- TN_L2
  
  # Calculate Sensitivity (SE)
  SE_L2 <- TP_L2 / (TP_L2 + FN_L2)
  sensitivity_L2[i] <- SE_L2
  
  # Calculate Specificity (SP)
  SP_L2 <- TN_L2 / (TN_L2 + FP_L2)
  specificity_L2[i] <- SP_L2
  
  ####### MSE and MAE for LASSO-2 coefficient estimation ##########
  MSE_LASSO_2[i] <- mean((all_beta_client2[i, ] - true_beta)^2)
  MAE_LASSO_2[i] <- mean(abs(all_beta_client2[i, ] - true_beta))
  
  ####### MSE for LASSO-2 predictions ##########
  pred_client2_2 <- clients[[2]]$X %*% beta_client2
  MSE_PRED_LASSO_2[i] <- mean((pred_client2_2 - clients[[2]]$y)^2)
  
  ####### MSE for LASSO-2 predictions with thresholded betas ##########
  beta_client2_thresh <- threshold_coefficients(beta_client2)
  all_beta_client2_thresh[i, ] <- beta_client2_thresh  # Store the thresholded betas
  pred_client2_2_thresh <- clients[[2]]$X %*% beta_client2_thresh
  MSE_PRED_LASSO_2_THRESH[i] <- mean((pred_client2_2_thresh - clients[[2]]$y)^2)
  
  ####### MSE and MAE for LASSO-2 coefficient estimation ##########
  MSE_beta_LASSO_2_THRESH[i] <- mean((all_beta_client2_thresh[i, ] - true_beta)^2)
  MAE_beta_LASSO_2_THRESH[i] <- mean(abs(all_beta_client2_thresh[i, ] - true_beta))  
  
}

######################### Performances: FP, FN, TP, TN, SE, SP #######################
############################## ADMM-LASSO ######################################
avg_TP <- mean(TP_list)
std_TP <- sd(TP_list)

avg_FP <- mean(FP_list)
std_FP <- sd(FP_list)

avg_FN <- mean(FN_list)
std_FN <- sd(FN_list)

avg_TN <- mean(TN_list)
std_TN <- sd(TN_list)

avg_SE <- mean(sensitivity)
std_SE <- sd(sensitivity)

avg_SP <- mean(specificity)
std_SP <- sd(specificity)

# Average and standard deviation of MSE across all replications
average_MSE_ADMM <- mean(MSE_ADMM_LASSO)
sd_MSE_ADMM <- sd(MSE_ADMM_LASSO)

# Average and standard deviation of MAE across all replications
average_MAE_ADMM <- mean(MAE_ADMM_LASSO)
sd_MAE_ADMM <- sd(MAE_ADMM_LASSO)

# Average and standard deviation of MSE for predictions across all replications
average_MSE_PRED_ADMM <- mean(MSE_PRED_ADMM_LASSO)
sd_MSE_PRED_ADMM <- sd(MSE_PRED_ADMM_LASSO)

# Average and standard deviation of MSE for predictions with thresholded betas across all replications
average_MSE_PRED_ADMM_THRESH <- mean(MSE_PRED_ADMM_LASSO_THRESH)
sd_MSE_PRED_ADMM_THRESH <- sd(MSE_PRED_ADMM_LASSO_THRESH)

# Average and standard deviation of MSE for coefficient with thresholded betas
average_MSE_beta_ADMM_THRESH <- mean(MSE_beta_ADMM_LASSO_THRESH)
sd_MSE_beta_ADMM_THRESH <- sd(MSE_beta_ADMM_LASSO_THRESH)

# Average and standard deviation of MAE for coefficient with thresholded betas
average_MAE_beta_ADMM_THRESH <- mean(MAE_beta_ADMM_LASSO_THRESH)
sd_MAE_beta_ADMM_THRESH <- sd(MAE_beta_ADMM_LASSO_THRESH)

############################## LASSO-POOL ######################################
avg_TP_LP <- mean(TP_list_LP)
std_TP_LP <- sd(TP_list_LP)

avg_FP_LP <- mean(FP_list_LP)
std_FP_LP <- sd(FP_list_LP)

avg_FN_LP <- mean(FN_list_LP)
std_FN_LP <- sd(FN_list_LP)

avg_TN_LP <- mean(TN_list_LP)
std_TN_LP <- sd(TN_list_LP)

avg_SE_LP <- mean(sensitivity_LP)
std_SE_LP <- sd(sensitivity_LP)

avg_SP_LP <- mean(specificity_LP)
std_SP_LP <- sd(specificity_LP)

# Average and standard deviation of MSE across all replications
average_MSE_LP <- mean(MSE_LASSO_POOL)
SD_MSE_LP <- sd(MSE_LASSO_POOL)

# Average and standard deviation of MAE across all replications
average_MAE_LP <- mean(MAE_LASSO_POOL)
SD_MAE_LP <- sd(MAE_LASSO_POOL)

# Average and standard deviation of MSE for predictions across all replications
average_MSE_PRED_LP <- mean(MSE_PRED_LASSO_POOL)
sd_MSE_PRED_LP <- sd(MSE_PRED_LASSO_POOL)

# Average and standard deviation of MSE for predictions with thresholded betas across all replications
average_MSE_PRED_LP_THRESH <- mean(MSE_PRED_LASSO_POOL_THRESH)
sd_MSE_PRED_LP_THRESH <- sd(MSE_PRED_LASSO_POOL_THRESH)

# Average and standard deviation of MSE for coefficient with thresholded betas
average_MSE_beta_LP_THRESH <- mean(MSE_beta_LASSO_POOL_THRESH)
sd_MSE_beta_LP_THRESH <- sd(MSE_beta_LASSO_POOL_THRESH)
# Average and standard deviation of MAE for coefficient with thresholded betas
average_MAE_beta_LP_THRESH <- mean(MAE_beta_LASSO_POOL_THRESH)
sd_MAE_beta_LP_THRESH <- sd(MAE_beta_LASSO_POOL_THRESH)

####################### LASSO-1 ###################
avg_TP_L1 <- mean(TP_list_L1)
std_TP_L1 <- sd(TP_list_L1)

avg_FP_L1 <- mean(FP_list_L1)
std_FP_L1 <- sd(FP_list_L1)

avg_FN_L1 <- mean(FN_list_L1)
std_FN_L1 <- sd(FN_list_L1)

avg_TN_L1 <- mean(TN_list_L1)
std_TN_L1 <- sd(TN_list_L1)

avg_SE_L1 <- mean(sensitivity_L1)
std_SE_L1 <- sd(sensitivity_L1)

avg_SP_L1 <- mean(specificity_L1)
std_SP_L1 <- sd(specificity_L1)

# Average and standard deviation of MSE across all replications
average_MSE_L1 <- mean(MSE_LASSO_1)
SD_MSE_L1 <- sd(MSE_LASSO_1)

# Average and standard deviation of MAE across all replications
average_MAE_L1 <- mean(MAE_LASSO_1)
SD_MAE_L1 <- sd(MAE_LASSO_1)

# Average and standard deviation of MSE for predictions across all replications
average_MSE_PRED_L1 <- mean(MSE_PRED_LASSO_1)
sd_MSE_PRED_L1 <- sd(MSE_PRED_LASSO_1)

# Average and standard deviation of MSE for predictions with thresholded betas across all replications
average_MSE_PRED_L1_THRESH <- mean(MSE_PRED_LASSO_1_THRESH)
sd_MSE_PRED_L1_THRESH <- sd(MSE_PRED_LASSO_1_THRESH)

# Average and standard deviation of MSE for coefficient with thresholded betas
average_MSE_beta_L1_THRESH <- mean(MSE_beta_LASSO_1_THRESH)
sd_MSE_beta_L1_THRESH <- sd(MSE_beta_LASSO_1_THRESH)

# Average and standard deviation of MSE for coefficient with thresholded betas
average_MAE_beta_L1_THRESH <- mean(MAE_beta_LASSO_1_THRESH)
sd_MAE_beta_L1_THRESH <- sd(MAE_beta_LASSO_1_THRESH)

################# LASSO-2 ###########################
avg_TP_L2 <- mean(TP_list_L2)
std_TP_L2 <- sd(TP_list_L2)

avg_FP_L2 <- mean(FP_list_L2)
std_FP_L2 <- sd(FP_list_L2)

avg_FN_L2 <- mean(FN_list_L2)
std_FN_L2 <- sd(FN_list_L2)

avg_TN_L2 <- mean(TN_list_L2)
std_TN_L2 <- sd(TN_list_L2)

avg_SE_L2 <- mean(sensitivity_L2)
std_SE_L2 <- sd(sensitivity_L2)

avg_SP_L2 <- mean(specificity_L2)
std_SP_L2 <- sd(specificity_L2)

# Average and standard deviation of MSE across all replications
average_MSE_L2 <- mean(MSE_LASSO_2)
SD_MSE_L2 <- sd(MSE_LASSO_2)

# Average and standard deviation of MAE across all replications
average_MAE_L2 <- mean(MAE_LASSO_2)
SD_MAE_L2 <- sd(MAE_LASSO_2)

# Average and standard deviation of MSE for predictions across all replications
average_MSE_PRED_L2 <- mean(MSE_PRED_LASSO_2)
sd_MSE_PRED_L2 <- sd(MSE_PRED_LASSO_2)

# Average and standard deviation of MSE for predictions with thresholded betas across all replications
average_MSE_PRED_L2_THRESH <- mean(MSE_PRED_LASSO_2_THRESH)
sd_MSE_PRED_L2_THRESH <- sd(MSE_PRED_LASSO_2_THRESH)

# Average and standard deviation of MSE for coefficient with thresholded betas
average_MSE_beta_L2_THRESH <- mean(MSE_beta_LASSO_2_THRESH)
sd_MSE_beta_L2_THRESH <- sd(MSE_beta_LASSO_2_THRESH)
# Average and standard deviation of MAE for coefficient with thresholded betas
average_MAE_beta_L2_THRESH <- mean(MAE_beta_LASSO_2_THRESH)
sd_MAE_beta_L2_THRESH <- sd(MAE_beta_LASSO_2_THRESH)


##############Print all the results #############
# Print TP metrics for all methods
cat("TP_ADMM:", avg_TP, "TP_LP:", avg_TP_LP, "TP_L1:", avg_TP_L1, "TP_L2:", avg_TP_L2, "\n")
cat("SD_TP_ADMM:", std_TP, "SD_TP_LP:", std_TP_LP, "SD_TP_L1:", std_TP_L1, "SD_TP_L2:", std_TP_L2, "\n")

# Print FP metrics for all methods
cat("FP_ADMM:", avg_FP,"FP_LP:", avg_FP_LP, "FP_L1:", avg_FP_L1, "FP_L2:", avg_FP_L2, "\n")
cat("SD_FP_ADMM:", std_FP, "SD_FP_LP:", std_FP_LP, "SD_FP_L1:", std_FP_L1, "SD_FP_L2:", std_FP_L2, "\n")

# Print TN metrics for all methods
cat("TN_ADMM:", avg_TN, "TN_LP:", avg_TN_LP,"TN_L1:", avg_TN_L1,"TN_L2:", avg_TN_L2, "\n")
cat("SD_TN_ADMM:", std_TN,"SD_TN_LP:", std_TN_LP, "SD_TN_L1:", std_TN_L1, "SD_TN_L2:", std_TN_L2, "\n")

# Print FN metrics for all methods
cat("FN_ADMM:", avg_FN,"FN_LP:", avg_FN_LP, "FN_L1:", avg_FN_L1, "FN_L2:", avg_FN_L2, "\n")
cat("SD_FN_ADMM:", std_FN,  "SD_FN_LP:", std_FN_LP, "SD_FN_L1:", std_FN_L1, "SD_FN_L2:", std_FN_L2, "\n")

# Print SE metrics for all methods
cat("SE_ADMM:", avg_SE,"SE_LP:", avg_SE_LP, "SE_L1:", avg_SE_L1, "SE_L2:", avg_SE_L2, "\n")
cat("SD_SE_ADMM:", std_SE, "SD_SE_LP:", std_SE_LP, "SD_SE_L1:", std_SE_L1,"SD_SE_L2:", std_SE_L2, "\n")

# Print SP metrics for all methods
cat("SP_ADMM:", avg_SP, "SP_LP:", avg_SP_LP, "SP_L1:", avg_SP_L1, "SP_L2:", avg_SP_L2, "\n")
cat("SD_SP_ADMM:", std_SP, "SD_SP_LP:", std_SP_LP, "SD_SP_L1:", std_SP_L1, "SD_SP_L2:", std_SP_L2, "\n")

# Print MSE metrics for all methods
cat("MSE_ADMM:", average_MSE_ADMM,"MSE_LP:", average_MSE_LP, "MSE_L1:", average_MSE_L1, "MSE_L2:", average_MSE_L2, "\n")
cat("SD_MSE_ADMM:", sd_MSE_ADMM, "SD_MSE_LP:", SD_MSE_LP, "SD_MSE_L1:", SD_MSE_L1, "SD_MSE_L2:", SD_MSE_L2, "\n")

# Print MAE metrics for all methods
cat("MAE_ADMM:", average_MAE_ADMM,"MAE_LP:", average_MAE_LP,  "MAE_L1:", average_MAE_L1, "MAE_L2:", average_MAE_L2, "\n")
cat("SD_MAE_ADMM:", sd_MAE_ADMM, "SD_MAE_LP:", SD_MAE_LP, "SD_MAE_L1:", SD_MAE_L1, "SD_MAE_L2:", SD_MAE_L2, "\n")

# Print MSE_pred metrics for all methods
cat("MSE_Pred_ADMM_LASSO:", average_MSE_PRED_ADMM,"MSE_Pred_LASSO_LP:", average_MSE_PRED_LP,"MSE_Pred_LASSO_1:", average_MSE_PRED_L1,"MSE_Pred_LASSO_2:", average_MSE_PRED_L2, "\n")
cat("SD_MSE_Pred_ADMM_LASSO:", sd_MSE_PRED_ADMM, "SD_MSE_Pred_LASSO_LP:", sd_MSE_PRED_LP, "SD_MSE_Pred_LASSO_1:", sd_MSE_PRED_L1,"SD_MSE_Pred_LASSO_2:", sd_MSE_PRED_L2, "\n")

# Print MSE_Pred_ADMM_LASSO_THRESH metrics for all methods
cat("MSE_Pred_ADMM_LASSO_THRESH:", average_MSE_PRED_ADMM_THRESH,"MSE_Pred_LASSO_LP_THRESH:", average_MSE_PRED_LP_THRESH,"MSE_Pred_LASSO_1_THRESH:", average_MSE_PRED_L1_THRESH,"MSE_Pred_LASSO_2_THRESH:", average_MSE_PRED_L2_THRESH, "\n")
cat("SD_MSE_Pred_ADMM_LASSO_THRESH:", sd_MSE_PRED_ADMM_THRESH,"SD_MSE_Pred_LP_THRESH:", sd_MSE_PRED_LP_THRESH,"SD_MSE_Pred_L1_THRESH:", sd_MSE_PRED_L1_THRESH,"SD_MSE_Pred_L2_THRESH:", sd_MSE_PRED_L2_THRESH, "\n")

# Print MSE_beta metrics for all methods
cat("MSE_beta_ADMM_LASSO_THRESH:", average_MSE_beta_ADMM_THRESH,"MSE_beta_LASSO_LP_THRESH:", average_MSE_beta_LP_THRESH,"MSE_beta_LASSO_1_THRESH:", average_MSE_beta_L1_THRESH, "MSE_beta_LASSO_2_THRESH:", average_MSE_beta_L2_THRESH, "\n")
cat("SD_MSE_beta_ADMM_THRESH:", sd_MSE_beta_ADMM_THRESH,"SD_MSE_beta_LP_THRESH:", sd_MSE_beta_LP_THRESH, "SD_MSE_beta_L1_THRESH:", sd_MSE_beta_L1_THRESH, "SD_MSE_beta_L2_THRESH:", sd_MSE_beta_L2_THRESH, "\n")

# Print MAE_beta metrics for all methods
cat("MAE_beta_ADMM_LASSO_THRESH:", average_MAE_beta_ADMM_THRESH, "MAE_beta_LASSO_LP_THRESH:", average_MAE_beta_LP_THRESH, "MAE_beta_LASSO_1_THRESH:", average_MAE_beta_L1_THRESH, "MAE_beta_LASSO_2_THRESH:", average_MAE_beta_L2_THRESH, "\n")
cat("SD_MAE_beta_ADMM_THRESH:", sd_MAE_beta_ADMM_THRESH, "SD_MAE_beta_LP_THRESH:", sd_MAE_beta_LP_THRESH,"SD_MAE_beta_L1_THRESH:", sd_MAE_beta_L1_THRESH, "SD_MAE_beta_L2_THRESH:", sd_MAE_beta_L2_THRESH, "\n")



